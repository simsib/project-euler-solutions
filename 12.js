const assert = require('assert');
/**
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

const getDivisorsCount = (number) => {
    return factorNumber(number);
};

const factorNumber = (number) => {
    let result = 0;
    for (let divisor = 1; divisor * divisor <= number; divisor++) {   
        if (number % divisor === 0 ) {
            if (divisor * divisor < number ) {
                result+=2;
            }
            else {
                result++;
            }
        }
    }
    return result;
}

const getTriangleNumber = (nth) => {
    let result = 0;
    while (nth !== 0) {
        result += nth--;
    }
    return result;
}
let result = 0;
let num = 1;

while (500 > result) {
    let triangle = getTriangleNumber(num);
    result = getDivisorsCount(triangle);
    if (result > 100) {
        console.log(`'${num}' triangle number '${triangle}' has ${result}}`);
    }
    num++;
}
console.log('done!');

assert.equal(getTriangleNumber(1),1);
assert.equal(getTriangleNumber(2),3);
assert.equal(getTriangleNumber(3),6);
assert.equal(getTriangleNumber(4),10);
assert.equal(getTriangleNumber(5),15);
assert.equal(getTriangleNumber(6),21);
assert.equal(getTriangleNumber(7),28);
assert.equal(getDivisorsCount(1),1);
assert.equal(getDivisorsCount(3),2);
assert.equal(getDivisorsCount(6),4);
assert.equal(getDivisorsCount(10),4);
assert.equal(getDivisorsCount(15),4);
assert.equal(getDivisorsCount(21),4);
assert.equal(getDivisorsCount(28),6);
